-- SHUFFLE

CREATE PROCEDURE dbo.SHUFFLECARDS
AS
SET NOCOUNT ON
BEGIN TRY
SELECT ROW_NUMBER() OVER (ORDER BY NEWID()) as [Index], * 
FROM deck
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
PRINT @ERRORMSG
END CATCH

-- ADD USER

CREATE PROCEDURE [dbo].[ADDUSER] @USERNAME VARCHAR(20), @PASSWORD VARCHAR(128)
AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @BALANCE FLOAT
DECLARE @USERSTATUS VARCHAR(20)

SET @BALANCE = 0
SET @USERSTATUS = 'STANDARD'
INSERT INTO account
VALUES (@USERNAME, @USERSTATUS, @BALANCE, @PASSWORD)
END TRY

BEGIN CATCH
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
PRINT @ERRORMSG
END CATCH

-- DELETE USER

CREATE PROCEDURE [dbo].[DELETEUSER] @USERNAME VARCHAR(20), @PASSWORD VARCHAR(128)
AS
SET NOCOUNT ON
BEGIN TRY
DELETE FROM account
WHERE aname = @USERNAME
AND [password] = @PASSWORD
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
PRINT @ERRORMSG
END CATCH

-- READ USER

CREATE PROCEDURE [dbo].[GETUSER] @USERNAME VARCHAR(20)
AS
SET NOCOUNT ON
BEGIN TRY
SELECT aname, astatus, balance
FROM account
WHERE aname = @USERNAME
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
PRINT @ERRORMSG
END CATCH


-- WITHDRAW FUNDS FROM ACCOUNT

CREATE PROCEDURE [dbo].[WITHDRAWFUNDS] @USERNAME VARCHAR(20), @AMOUNT FLOAT
AS
SET NOCOUNT ON
DECLARE @FUNDMSG VARCHAR(30)
DECLARE @ErrorMessage VARCHAR(200)
BEGIN TRY
DECLARE @BALANCE FLOAT

SELECT @BALANCE = balance
FROM account
WHERE aname = @USERNAME

IF (@BALANCE >= @AMOUNT AND @AMOUNT > 0)
BEGIN
SET @BALANCE = @BALANCE - @AMOUNT
UPDATE account
SET balance = @BALANCE
WHERE aname = @USERNAME
SET @FUNDMSG = CAST(@AMOUNT as VARCHAR(20)) + ' WITHDRAWED'
SELECT @FUNDMSG AS 'fundmsg'
END

ELSE IF (@AMOUNT > @BALANCE)
BEGIN
SET @ErrorMessage = 'INSUFFICIENT FUNDS'
RAISERROR(@ErrorMessage, 16, 1)
END

ELSE IF (@AMOUNT <= 0)
BEGIN
SET @ErrorMessage = 'INVALID AMOUNT'
RAISERROR(@ErrorMessage, 16, 1)
END
END TRY

BEGIN CATCH
SELECT ERROR_MESSAGE()
END CATCH

-- DEPOSIT FUNDS TO ACCOUNT

CREATE PROCEDURE [dbo].[DEPOSITFUNDS] @USERNAME VARCHAR(20), @AMOUNT FLOAT
AS
SET NOCOUNT ON
BEGIN TRY
BEGIN TRANSACTION
DECLARE @BALANCE FLOAT
DECLARE @FUNDMSG VARCHAR(30)

SELECT @BALANCE = balance
FROM account
WHERE aname = @USERNAME

SET @BALANCE = @BALANCE + @AMOUNT

UPDATE account
SET balance = @BALANCE
WHERE aname = @USERNAME
COMMIT
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
SELECT @ERRORMSG
END CATCH

-- TRANSACTION

CREATE PROCEDURE [dbo].[TRANSACTION] @USERNAME VARCHAR(20) = NULL, @GAMEID INTEGER = NULL
AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @BALANCE FLOAT
DECLARE @TRANSACTIONAMOUNT FLOAT

BEGIN TRANSACTION

SELECT @BALANCE = balance
FROM account
WHERE aname = @USERNAME

SELECT @TRANSACTIONAMOUNT = result
FROM gameround
WHERE aname = @USERNAME AND gameid = @GAMEID

SET @BALANCE = @BALANCE + @TRANSACTIONAMOUNT
 
UPDATE account
SET balance = @BALANCE
WHERE aname = @USERNAME

SELECT @BALANCE = balance
FROM account
WHERE aname = 'BANK'

SELECT @TRANSACTIONAMOUNT = result
FROM gameround
WHERE aname = @USERNAME AND gameid = @GAMEID

SET @BALANCE = @BALANCE - @TRANSACTIONAMOUNT

UPDATE account
SET balance = @BALANCE
WHERE aname = 'BANK'
COMMIT
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
SELECT @ERRORMSG
END CATCH


----- GETMAXBET

CREATE PROCEDURE [dbo].[GETMAXBET] @SESSIONID INT = NULL
AS
BEGIN
BEGIN TRY
DECLARE @MAXBET INT
SELECT @MAXBET = maxbet
FROM BlackjackGame
WHERE sessionid = @SESSIONID

IF (@MAXBET = null)
DECLARE @ErrorMessage VARCHAR(30)
SET @ErrorMessage = 'NO BET FOUND!'
RAISERROR(@ErrorMessage, 16, 1)
END TRY

BEGIN CATCH
SELECT @ERRORMESSAGE AS 'ERROR'
END CATCH
END


...... GETMINBET

CREATE PROCEDURE [dbo].[GETMINBET] @SESSIONID INT = NULL
AS
BEGIN
BEGIN TRY
DECLARE @MINBET INT
SELECT @MINBET = minbet 
FROM BlackjackGame
WHERE sessionid = @SESSIONID

IF (@MINBET = null)
DECLARE @ErrorMessage VARCHAR(30)
SET @ErrorMessage = 'NO BET FOUND!'
RAISERROR(@ErrorMessage, 16, 1)

END TRY

BEGIN CATCH
SELECT @ERRORMESSAGE AS 'ERROR'
END CATCH
END
