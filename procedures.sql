-- SHUFFLE

CREATE PROCEDURE dbo.SHUFFLECARDS
AS
SET NOCOUNT ON
BEGIN TRY
SELECT ROW_NUMBER() OVER (ORDER BY NEWID()) as [Index], * 
FROM deck
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
PRINT @ERRORMSG
END CATCH

-- ADD USER

CREATE PROCEDURE [dbo].[ADDUSER] @USERNAME VARCHAR(20), @USERSTATUS VARCHAR(20) = 'STANDARD'
AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @BALANCE INT
SET @BALANCE = 0
INSERT INTO account
VALUES (@USERNAME, @USERSTATUS, @BALANCE)
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
PRINT @ERRORMSG
END CATCH

DROP PROC dbo.adduser

-- DELETE USER

CREATE PROCEDURE [dbo].[DELETEUSER] @ACCOUNTID INTEGER
AS
SET NOCOUNT ON
BEGIN TRY
DELETE FROM account
WHERE accountid = @accountid
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
PRINT @ERRORMSG
END CATCH

-- READ USER

CREATE PROCEDURE [dbo].[GETUSER] @USERID INTEGER
AS
SET NOCOUNT ON
BEGIN TRY
SELECT accountId, aname, astatus, balance
FROM account
WHERE accountId = @USERID
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
PRINT @ERRORMSG
END CATCH


-- UPDATE USER

CREATE PROCEDURE [dbo].[UPDATEUSER] @USERID INTEGER, @USERNAME VARCHAR(30)
AS
SET NOCOUNT ON
BEGIN TRY
UPDATE Account
SET aname = @USERNAME
WHERE accountId = @USERID
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
PRINT @ERRORMSG
END CATCH

-- WITHDRAW FUNDS FROM ACCOUNT

CREATE PROCEDURE [dbo].[WITHDRAWFUNDS] @USERID INTEGER, @AMOUNT FLOAT
AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @BALANCE INTEGER

SELECT @BALANCE = a.balance
FROM account a
WHERE a.accountId = @USERID

IF (@BALANCE >= @AMOUNT)
BEGIN
SET @BALANCE = @BALANCE - @AMOUNT
UPDATE account
SET balance = @BALANCE
WHERE accountId = @USERID
END

ELSE IF (@AMOUNT > @BALANCE)
BEGIN
DECLARE @FUNDMSG VARCHAR(30) -- generiskt felmeddelande, fix
SET @FUNDMSG = 'INSUFFICIENT FUNDS'
PRINT @FUNDMSG
END
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
PRINT @ERRORMSG
END CATCH

-- DEPOSIT FUNDS TO ACCOUNT

CREATE PROCEDURE [dbo].[DEPOSITFUNDS] @USERID INTEGER, @AMOUNT FLOAT
AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @BALANCE INTEGER

SELECT @BALANCE = a.balance
FROM account a
WHERE a.accountId = @USERID

SET @BALANCE = @BALANCE + @AMOUNT

UPDATE account
SET balance = @BALANCE
WHERE accountId = @USERID
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
PRINT @ERRORMSG
END CATCH

-- TRANSACTION

CREATE PROCEDURE [dbo].[TRANSACTION] @USERID INTEGER = NULL, @GAMEID INTEGER = NULL
AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @BALANCE INTEGER
DECLARE @TRANSACTIONAMOUNT INTEGER

BEGIN TRANSACTION

SELECT @BALANCE = a.balance
FROM account a
WHERE a.accountid = @USERID

SELECT @TRANSACTIONAMOUNT = gr.result
FROM gameround gr
WHERE gr.accountid = @USERID AND gr.gameid = @GAMEID

SET @BALANCE = @BALANCE + @TRANSACTIONAMOUNT
 
UPDATE account
SET balance = @BALANCE
WHERE accountid = @USERID

SELECT @BALANCE = b.balance
FROM account b
WHERE accountid = 0

SELECT @TRANSACTIONAMOUNT = gr.result
FROM gameround gr
WHERE gr.accountid = @USERID AND gr.gameid = @GAMEID

SET @BALANCE = @BALANCE - @TRANSACTIONAMOUNT

UPDATE account
SET balance = @BALANCE
WHERE accountid = 0
COMMIT
END TRY

BEGIN CATCH
ROLLBACK
DECLARE @ERRORMSG VARCHAR(2000)
SET @ERRORMSG = ERROR_MESSAGE()
SELECT @ERRORMSG
END CATCH
